#include <stdio.h>
#include <string.h>

void error(int n);



/*
 * n == 1，跳至下一个分号，保留分号为symbol
 * n == 2，跳至文件结尾
 * n == 3，不跳
 * n == 4, 声明函数时，没有函数名，但有参数表前的左小括号(或者有参数名，左小括号，但没有在应该的位置找到右小括号)，
 *              此时持续跳读直到小括号形成匹配,然后再读一个符号
 *         //////(后面的不要了，并且需要跳过整个函数体的大括号部分
 *         //////如果左小括号后先遇到了左大括号，则能保证有'函数体'且能跳过函数体
 *         //////但如果左小括号后先匹配到了右小括号，则无法确定是否有函数体。此时持续向前读符号，直到读到int，char，void和{中的一个
 *         //////如果是{，则有函数体，并跳读函数体。如果是其他三个，则认为没有函数体，报一个没有函数体的error，并返回，把其他三种情况作为下一个函数来处理)
 * n == 5, 声明函数时，类型标识符后不是函数名，也不是左小括号(或者有函数名，但函数名后不是左小括号)，此时持续向前读符号，直到读到(, {中的一个
 *         如果读到了(, 按skip(4)处理
 *         如果读到了{,直接返回，跳转到（正确部分的）函数体匹配
 * n == 6, 声明函数时，参数表后的)后不是{,即找不到函数体
 *         此时持续向前读符号，直到读到{
 *         跳转到（正确部分的）函数体匹配
 * n == 7, 跳读，直到找到')'   ( 此时已有一个'(' )
 * n == 8, 缺少'}'，跳读直到大括号形成匹配(此时已有一个'{'),然后再读一个符号
 * n == 9, 跳读，直到中括号形成匹配(此时已有一个'[')     （这一条可能用不到？）
 * n == 10,if(while/switch)后没有'('，持续跳读直到
 *              遇到'('，则持续读直到匹配一对小括号，然后继续读直到遇到语句(遇到语句停止时，大小括号需匹配) 或 一个单独的'}'
 *              遇到'{'，则匹配一对大括号
 *              遇到';'
 * n == 11,switch语句')'后不是'{'，此时持续向前读取
 *              如果先遇到';'，停止跳读
 *              如果先遇到'{',则跳读至大括号形成匹配
 * n == 12,函数调用时，缺少'(',持续读取直到
 *              遇到';'  在这一过程中保证括号是匹配的           //不要了
 * n == 13,变量重复声明，跳至','或';'                         //不要了
 * n == 14,全局部分类型标识符后无标识符，跳至下一个类型标识符
 * n == 15,跳至下一个分号，与skip1不同的是，skip15读到分号后再读一位，不保留分号
 * n == 16,跳至逗号或)
 * n == 17,跳至),并再读一个符号
 * n == 18,跳至)或;
 */
void skip(int n);

void skip1(int n);
void skip2(int n);
void skip3(int n);
void skip4(int n);
void skip5(int n);
void skip6(int n);
void skip7(int n);
void skip8(int n);
void skip9(int n);
void skip10(int n);
void skip11(int n);
void skip12(int n);
void skip13(int n);
void skip14(int n);
void skip15(int n);
void skip16(int n);
void skip17(int n);
void skip18(int n);